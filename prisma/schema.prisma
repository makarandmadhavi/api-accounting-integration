generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model connection {
  id              String            @id @default(uuid()) @db.VarChar(255)
  access_token    String?           @unique(map: "uk_dfbg47nd45rcdtkk3esk8woaa") @db.VarChar(255)
  contact_id      String?           @db.VarChar(255)
  is_ready        Boolean           @default(false)
  merchant_name   String?           @db.VarChar(255)
  platform        String?           @db.VarChar(255)
  email           String?           @db.VarChar
  IncomeStatement IncomeStatement[]
  BalanceSheet    BalanceSheet[]
}

model Users {
  Id                       Int       @id @default(autoincrement())
  ContactId                Int
  FirstName                String?
  MiddleName               String?
  LastName                 String?
  Prefix                   String?
  EmailAddress             String?
  Password                 String?
  IsActivated              Boolean?
  Token                    String?
  TokenUpdatedDate         DateTime? @db.Timestamp(6)
  EmailVerifiedAt          DateTime? @db.Timestamp(6)
  PasswordToken            String?
  PasswordTokenUpdatedDate DateTime? @db.Timestamp(6)
  QuoteDocumentURL         String?   @db.VarChar(255)
  created_at               DateTime? @default(now()) @db.Timestamp(6)
  updated_at               DateTime? @default(now()) @db.Timestamp(6)
  createdby                Int?
  is_archived              Boolean?  @default(false)
  Session                  Session?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      @unique
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [Id])
}

model IncomeStatement {
  id           Int        @id @default(autoincrement())
  access_token String     @db.VarChar(255)
  start_date   DateTime
  end_date     DateTime
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  currency_code     String?    @db.VarChar(255)
  net_income   Float?
  net_sales    Float?
  net_profit   Float?
  total_income Float?
  total_expenses Float?
  total_cost_of_sales Float?
  connection   connection @relation(fields: [access_token], references: [access_token])
}

model BalanceSheet {
  id                Int        @id @default(autoincrement())
  access_token      String     @db.VarChar(255)
  start_date        DateTime
  end_date          DateTime
  created_at        DateTime?  @default(now()) @db.Timestamp(6)
  updated_at        DateTime?  @default(now()) @db.Timestamp(6)
  currency_code          String?    @db.VarChar(255)
  total_assets      Float?
  total_liabilities Float?
  total_equity      Float?
  connection        connection @relation(fields: [access_token], references: [access_token])
}
